0.1 为什么要编写单元测试
1. 原则上，单元测试本身就是软件工程开发和集成过程中的重要一部分
2. 通过单元测试验证代码符合最基本的功能预期，尽早(在联调之前)发现较低级的错误
3. 用于回归测试中检测新引入的代码是否对已有代码的正常运行造成影响
4. 在持续集成过程的反复运行中检测开发时不容易发现的概率性错误，及早发现bug
5. 通过单元测试用例分析代码应有的逻辑结构，有助于完成低耦合，封装合理的实现
6. ...
0.2 测试驱动开发(TDD)的工作流
1. 在一个功能模块开发之前，通过阅读PRD充分了解代码应达到的预期
2. 以文档的形式尽可能详尽的列举出需求中涵盖的各种case，在后续任何步骤中发现问题后，回到此步骤重新迭代
3. 将文档中的case抽象为代码的输入输出，设计代码结构，并编写单元测试
4. 实现功能模块
5. 运行单元测试验证开发的代码已经满足最基本的预期要求
6. 联调和功能测试
0.3 怎么编写单元测试
1. 单元测试应该覆盖到代码中的每一个最小可测试单元，这应该建立在代码结构合理解构和封装的基础上
2. 对代码执行后所应该带来的变化进行断言，一些逻辑下也会需要对代码执行后不应该带来的变化进行断言，避免对显而易见的逻辑进行形式化的测试
3. 单元测试不应该依赖任何状态，也不应该对系统的状态造成影响，测试所需要的数据应该在测试中进行构造，并在一次测试运行完毕后删除构造出的测试数据
